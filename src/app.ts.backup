import express from 'express';
import path from 'path';
import { setRoutes } from './routes';
import { errorHandler } from './middlewares';
import { diagnosticsMiddleware, enhancedErrorHandler } from './middlewares/diagnostics.middleware';
import https from 'https';
import fs from 'fs';
import dotenv from 'dotenv';

// Cargar variables de entorno desde el archivo .env
dotenv.config();

const app = express();

// Configuración de variables de entorno
const PORT = process.env.PORT || 3000;
const HTTPS_PORT = process.env.HTTPS_PORT || 59999; // Puerto extremadamente alto para evitar problemas de permisos
const isDev = process.env.NODE_ENV !== 'production';
const DOMAIN = isDev ? 'localhost' : 'www.datainsight.com'; // Cambiado a datainsight.com
const ROOT_DOMAIN = isDev ? 'localhost' : 'datainsight.com'; // Cambiado a datainsight.com
const SSL_ENABLED = process.env.SSL_ENABLED === 'true' || false; // Deshabilitado por defecto

// Middleware para diagnóstico (debe ser el primero para capturar todos los requests)
app.use(diagnosticsMiddleware);

// Middleware configuration
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// CORS configuration for domain
app.use((req, res, next) => {
  const allowedOrigins = [
    `http://${DOMAIN}:${PORT}`,
    `https://${DOMAIN}:${HTTPS_PORT}`,
    `http://${ROOT_DOMAIN}:${PORT}`,
    `https://${ROOT_DOMAIN}:${HTTPS_PORT}`,
    'http://localhost:3000', // Permitir localhost para desarrollo
    'https://localhost:59999' // Permitir localhost HTTPS para desarrollo
  ];
  
  const origin = req.headers.origin;
  if (origin && allowedOrigins.includes(origin)) {
    res.header('Access-Control-Allow-Origin', origin);
  }
  
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE');
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
  next();
});

// Servir archivos estáticos desde la carpeta 'public'
app.use(express.static(path.join(__dirname, '../public')));

// Set up routes
setRoutes(app);

// Error handling middleware (primero el original y luego el mejorado)
app.use(errorHandler);
app.use(enhancedErrorHandler);

// Iniciar servidor con HTTPS si está habilitado SSL, de lo contrario usar HTTP
if (SSL_ENABLED) {
  try {
    // Rutas a los archivos de certificado
    const privateKeyPath = isDev 
      ? path.join(__dirname, '../ssl/privkey.pem') 
      : process.env.SSL_KEY_PATH || '/etc/letsencrypt/live/datainsight.com/privkey.pem';
    
    const certificatePath = isDev
      ? path.join(__dirname, '../ssl/fullchain.pem')
      : process.env.SSL_CERT_PATH || '/etc/letsencrypt/live/datainsight.com/fullchain.pem';
    
    // Verificar que los archivos existen
    if (fs.existsSync(privateKeyPath) && fs.existsSync(certificatePath)) {
      // Configurar opciones SSL
      const httpsOptions = {
        key: fs.readFileSync(privateKeyPath),
        cert: fs.readFileSync(certificatePath)
      };
      
      // Crear servidor HTTPS
      const httpsServer = https.createServer(httpsOptions, app);
      httpsServer.listen(HTTPS_PORT, () => {
        console.log(`HTTPS Server running on port ${HTTPS_PORT}`);
        console.log(`Sitio web seguro disponible en: https://${isDev ? 'localhost' : DOMAIN}:${isDev ? HTTPS_PORT : ''}`);
      });
      
      // También mantener el servidor HTTP para redireccionar a HTTPS
      app.listen(PORT, () => {
        console.log(`HTTP Server running on port ${PORT} (redirecting to HTTPS)`);
      });
    } else {
      console.warn(`Archivos de certificado SSL no encontrados en ${privateKeyPath} y ${certificatePath}. Iniciando solo servidor HTTP.`);
      app.listen(PORT, () => {
        console.log(`HTTP Server running on port ${PORT}`);
        console.log(`Sitio web disponible en: http://${isDev ? 'localhost' : DOMAIN}:${isDev ? PORT : ''}`);
      });
    }
  } catch (error) {
    console.error('Error al iniciar servidor HTTPS:', error);
    app.listen(PORT, () => {
      console.log(`HTTP Server running on port ${PORT} (fallback por error SSL)`);
      console.log(`Sitio web disponible en: http://${isDev ? 'localhost' : DOMAIN}:${isDev ? PORT : ''}`);
    });
  }
} else {
  // Iniciar solo servidor HTTP para desarrollo
  app.listen(PORT, () => {
    console.log(`HTTP Server running on port ${PORT}`);
    console.log(`Sitio web disponible en: http://${isDev ? 'localhost' : DOMAIN}:${isDev ? PORT : ''}`);
  });
}